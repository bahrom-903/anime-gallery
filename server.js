// =================================================================
//      –§–ê–ô–õ: server.js
//      –†–û–õ–¨: –ë—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// =================================================================
import express from 'express';
import Replicate from 'replicate';
import fetch from 'node-fetch';
import path from 'path';
import { fileURLToPath } from 'url';

// –ë–õ–û–ö 1: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(express.json());

// –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç —Å–µ—Ä–≤–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–¥–∞–≤–∞–ª —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (html, css, js)
// –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.
app.use(express.static(path.join(__dirname, '..')));

const REPLICATE_API_TOKEN = process.env.REPLICATE_API_TOKEN;
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const PORT = process.env.PORT || 3000;

if (!REPLICATE_API_TOKEN) {
    console.warn("!!! –í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
}

const replicate = new Replicate({ auth: REPLICATE_API_TOKEN });

const BROWSER_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8'
};

const PROMPT_BRAIN = {
    waifu: { positive: 'anime artwork, anime style, key visual, vibrant, studio quality, masterpiece, best quality,', negative: 'photo, realistic, 3d, render, photography, real life, text, watermark, low quality, worst quality, blurry' },
    anime_gif: { positive: 'anime artwork, anime style, key visual, vibrant, studio quality, masterpiece, best quality,', negative: 'photo, realistic, 3d, render, photography, real life, text, watermark, low quality, worst quality, blurry' },
    cyberpunk: { positive: 'cyberpunk art, neon lights, futuristic city, cinematic, detailed, atmospheric, high-tech, masterpiece,', negative: 'drawing, painting, anime, nature, day, bright, cartoon' },
    nature: { positive: 'landscape photography, national geographic, 4k, photorealistic, stunning, beautiful, detailed, masterpiece,', negative: 'drawing, painting, anime, people, text, watermark, ugly' },
    games: { positive: 'video game art, fan art, splash screen, concept art, cinematic, detailed character, epic, masterpiece,', negative: 'photo, real life, screenshot, text, watermark, blurry, low quality' },
    dark_anime: { positive: 'dark fantasy art, gothic, horror, monster, intricate details, moody, atmospheric, masterpiece,', negative: 'photo, realistic, cute, bright, day, happy, text, watermark' },
    supercars: { positive: 'car photography, cinematic shot, photorealistic, hyper detailed, professional, studio lighting, 8k, masterpiece,', negative: 'drawing, anime, painting, cartoon, ugly, text, watermark, people' },
    default: { positive: 'masterpiece, best quality, high quality, detailed,', negative: 'low quality, worst quality, blurry, text, watermark, signature' }
};

// –ë–õ–û–ö 2: –°–ò–°–¢–ï–ú–ê –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø
const serverCache = new Map();
const CACHE_DURATION_MS = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

// –ë–õ–û–ö 3: –≠–ù–î–ü–û–ò–ù–¢–´ API
app.post('/generate-image', async (req, res) => {
    try {
        if (!REPLICATE_API_TOKEN) throw new Error("–ö–ª—é—á API –¥–ª—è Replicate –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
        const { prompt: userPrompt, negative_prompt: userNegativePrompt, category } = req.body;
        if (!userPrompt) return res.status(400).json({ error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
        const brain = PROMPT_BRAIN[category] || PROMPT_BRAIN.default;
        const finalPositivePrompt = `${brain.positive} ${userPrompt}`;
        const finalNegativePrompt = `${brain.negative}, ${userNegativePrompt || ''}`;
        const model = "stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4";
        console.log(`-> GENERATE: –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "${category}"`);
        const input = { prompt: finalPositivePrompt, negative_prompt: finalNegativePrompt };
        const output = await replicate.run(model, { input });
        if (output && output.length > 0) {
            res.json({ imageUrl: output[0], isAiGenerated: true });
        } else { throw new Error('Replicate API –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'); }
    } catch (error) {
        console.error('!!! –û–®–ò–ë–ö–ê REPLICATE:', error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.' });
    }
});

app.post('/get-image-from-source', async (req, res) => {
    const { url, category } = req.body;
    if (!url || !category) return res.status(400).json({ error: 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã.' });
    const cacheKey = `random_image_${category}`;
    const cachedItem = serverCache.get(cacheKey);
    if (cachedItem && Date.now() - cachedItem.timestamp < CACHE_DURATION_MS) {
        console.log(`-> GET-IMAGE: –û—Ç–¥–∞–µ–º –∏–∑ –∫–µ—à–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"`);
        return res.json({ imageUrl: cachedItem.imageUrl });
    }
    console.log(`-> GET-IMAGE: –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: ${url}`);
    try {
        const response = await fetch(url, { headers: BROWSER_HEADERS });
        if (!response.ok) throw new Error(`–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        let imageUrl;
        if (url.includes('waifu.im') || url.includes('waifu.pics')) {
            const data = await response.json();
            imageUrl = (data.images && data.images[0] ? data.images[0].url : null) || data.url;
            if (!imageUrl) throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.');
        } else { imageUrl = response.url; }
        serverCache.set(cacheKey, { imageUrl, timestamp: Date.now() });
        console.log(`-> GET-IMAGE: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ –∫–µ—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"`);
        res.json({ imageUrl });
    } catch (error) {
        console.error(`!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê GET-IMAGE-FROM-SOURCE –¥–ª—è ${url}:`, error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.' }); 
    }
});

app.post('/feedback', async (req, res) => {
    try {
        const { type, message } = req.body;
        if (!type || !message) { return res.status(400).json({ error: '–¢–∏–ø –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' }); }
        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            console.error('!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤.' });
        }
        console.log(`-> FEEDBACK: –ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ —Ç–∏–ø–∞ "${type}". –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...`);
        const title = type === 'bug' ? 'üêû –ù–æ–≤—ã–π –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç' : 'üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
        const text = `<b>${title}</b>\n\n<pre>${message}</pre>`;
        const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        const tgResponse = await fetch(telegramApiUrl, {
            method: 'POST', headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
        });
        const responseData = await tgResponse.json();
        if (!responseData.ok) { throw new Error(`Telegram API Error: ${responseData.description}`); }
        console.log('-> FEEDBACK: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
        res.status(200).json({ success: true, message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
    } catch(error) {
        console.error('!!! –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò /feedback:', error.message);
        res.status(500).json({ error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞.' });
    }
});

// –ë–õ–û–ö 4: –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
app.listen(PORT, () => { console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}. –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`); });
