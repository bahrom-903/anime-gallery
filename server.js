// --- –ù–ê–ß–ê–õ–û –§–ê–ô–õ–ê server.js (–°–£–ü–ï–†-–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) ---

import express from 'express';
import Replicate from 'replicate';
import fetch from 'node-fetch';

const app = express();
app.use(express.json());
app.use(express.static('.'));

const replicate = new Replicate({ auth: process.env.REPLICATE_API_TOKEN });
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// *** –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #1: –ó–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ç–≤–æ—Ä—è—é—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º ***
const BROWSER_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
    'Sec-Fetch-Dest': 'document',
    'Sec-Fetch-Mode': 'navigate',
    'Sec-Fetch-Site': 'none',
    'Sec-Fetch-User': '?1',
    'Upgrade-Insecure-Requests': '1',
};

// server.js
// üëá –ó–ê–ú–ï–ù–ò –í–°–Æ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú –ù–ê –≠–¢–û–¢ –ö–û–î üëá
app.post('/generate-image', async (req, res) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const { prompt, negative_prompt, category } = req.body;
        if (!prompt) return res.status(400).json({ error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });

        let finalPrompt = prompt;

        // –ù–∞—à–∞ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        const mandatoryKeywords = {
            waifu: ['girl', 'woman', 'waifu', 'female'],
            supercars: ['car', 'supercar', 'sportscar', 'automobile']
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'nature': ['landscape', 'nature', 'tree']
        };

        if (category && mandatoryKeywords[category]) {
            const keywords = mandatoryKeywords[category];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ —Ö–æ—Ç—å –æ–¥–Ω–æ –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
            const hasKeyword = keywords.some(keyword => prompt.toLowerCase().includes(keyword));
            
            if (!hasKeyword) {
                // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –Ω–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞
                finalPrompt = `${keywords[0]}, ${prompt}`;
                console.log(`-> PROMPT-FIX: –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ "${keywords[0]}" –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}"`);
            }
        }
        
        console.log(`-> GENERATE: –ü—Ä–æ–º–ø—Ç: "${finalPrompt}"`);
        const model = "stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4";
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const input = { prompt: finalPrompt, negative_prompt };
        const output = await replicate.run(model, { input });
        
        if (output && output.length > 0) {
            res.json({ imageUrl: output[0] });
        } else { throw new Error('Replicate API –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'); }
    } catch (error) {
        console.error('!!! –û–®–ò–ë–ö–ê REPLICATE:', error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã.' });
    }
});

// server.js
// üëá –ö–û–ü–ò–†–£–ô –í–°–Å –û–¢–°–Æ–î–ê –ò –ó–ê–ú–ï–ù–Ø–ô –°–í–û–ô –ë–õ–û–ö üëá
app.post('/get-image-from-source', async (req, res) => {
    const { url } = req.body;
    if (!url) return res.status(400).json({ error: 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    console.log(`-> GET-IMAGE: –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: ${url}`);
    try {
        const response = await fetch(url, { headers: BROWSER_HEADERS });
        if (!response.ok) {
            console.error(`!!! –û–®–ò–ë–ö–ê GET-IMAGE: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${url}: ${response.status}`);
            throw new Error(`–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        }
        
        if (url.includes('waifu.im') || url.includes('waifu.pics')) {
            const data = await response.json();
            let imageUrl = data.images && data.images[0] ? data.images[0].url : null;
            if (!imageUrl) { imageUrl = data.url; }

            if (!imageUrl) {
                console.error('!!! –û–®–ò–ë–ö–ê API: –ù–µ –Ω–∞–π–¥–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç', url, '–û—Ç–≤–µ—Ç:', JSON.stringify(data));
                throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.');
            }
            
            console.log(`-> API-OK: –ù–∞–π–¥–µ–Ω URL: ${imageUrl}`);
            res.json({ imageUrl: imageUrl });

        } else {
            console.log(`-> DIRECT-LINK-OK: –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: ${response.url}`);
            res.json({ imageUrl: response.url });
        }
    } catch (error) {
        console.error(`!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê GET-IMAGE-FROM-SOURCE –¥–ª—è ${url}:`, error.message);
        // üëá –í–û–¢ –¢–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í –î–ï–ô–°–¢–í–ò–ò! üëá
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.' }); 
    }
});
// üëÜ –ò –î–û–°–Æ–î–ê üëÜ
app.post('/feedback', async (req, res) => {
    try {
        const { type, message } = req.body;
        if (!type || !message) {
            console.log('-> FEEDBACK: –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å.');
            return res.status(400).json({ error: '–¢–∏–ø –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });
        }
        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            console.error('!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–µ–∫—Ä–µ—Ç—ã TELEGRAM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤.' });
        }
        
        console.log(`-> FEEDBACK: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram... –¢–∏–ø: ${type}`);
        const title = type === 'bug' ? 'üêû –ù–æ–≤—ã–π –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç' : 'üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
        const text = `<b>${title}</b>\n\n<pre>${message}</pre>`;
        const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const tgResponse = await fetch(telegramApiUrl, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                // *** –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #3: –ò—Å–ø–æ–ª—å–∑—É–µ–º User-Agent –∏ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ ***
                'User-Agent': BROWSER_HEADERS['User-Agent']
            },
            body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
        });
        
        console.log(`-> TELEGRAM API STATUS: ${tgResponse.status}`);
        const responseData = await tgResponse.json();

        if (!responseData.ok) {
            console.error(`!!! –û–®–ò–ë–ö–ê TELEGRAM API: ${responseData.description}`, responseData);
            throw new Error(`Telegram API Error: ${responseData.description}`);
        }
        
        console.log('-> FEEDBACK: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
        res.status(200).json({ success: true, message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
    } catch(error) {
        console.error('!!! –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò /feedback:', error.message);
        res.status(500).json({ error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞.' });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => { console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}. –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`); });

// --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê server.js ---
