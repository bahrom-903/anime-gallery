// =================================================================
//          üëá –ö–û–ü–ò–†–£–ô –í–ï–°–¨ –ö–û–î –ù–ò–ñ–ï –î–õ–Ø –§–ê–ô–õ–ê server.js üëá
// =================================================================

import express from 'express';
import Replicate from 'replicate';
import fetch from 'node-fetch';

const app = express();
app.use(express.json());
app.use(express.static('.'));

const replicate = new Replicate({ auth: process.env.REPLICATE_API_TOKEN });

const BROWSER_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8'
};

// ====================================================================
//           ‚≠ê –ì–õ–ê–í–ù–´–ô –ê–ü–ì–†–ï–ô–î! –ö–ê–†–¢–ê –ú–û–î–ï–õ–ï–ô AI ‚≠ê
// ====================================================================
const MODEL_MAP = {
    // –î–ª—è –∞–Ω–∏–º–µ-–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü. –º–æ–¥–µ–ª—å Anything V5
    'waifu': 'cjwbw/anything-v5-v5-0:1a765378bc3e89ac1097a452b861753c5453628e4e466c4068134d163d819b88',
    'anime_gif': 'cjwbw/anything-v5-v5-0:1a765378bc3e89ac1097a452b861753c5453628e4e466c4068134d163d819b88',
    // –î–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
    'default': 'stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4'
};

app.post('/generate-image', async (req, res) => {
    try {
        const { prompt, negative_prompt, category } = req.body;
        if (!prompt) return res.status(400).json({ error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });

        // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—à–µ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const model = MODEL_MAP[category] || MODEL_MAP['default'];
        console.log(`-> GENERATE: –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "${category}", –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: "${model}"`);

        // –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –≤ –ø—Ä–æ–º–ø—Ç
        const qualityPrompt = "masterpiece, best quality, ultra-detailed, sharp focus";
        const finalPrompt = `${prompt}, ${qualityPrompt}`;

        // –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–∞—é—â–∏–µ —Å–ª–æ–≤–∞ –≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const baseNegativePrompt = "lowres, bad anatomy, bad hands, text, error, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry, artist name";
        const finalNegativePrompt = `${baseNegativePrompt}, ${negative_prompt || ''}`;

        console.log(`-> PROMPT: "${finalPrompt}" | NEGATIVE: "${finalNegativePrompt}"`);

        const input = {
            prompt: finalPrompt,
            negative_prompt: finalNegativePrompt,
        };
        
        const output = await replicate.run(model, { input });

        if (output && output.length > 0) {
            res.json({ imageUrl: output[0] });
        } else { 
            throw new Error('Replicate API –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'); 
        }
    } catch (error) {
        console.error('!!! –û–®–ò–ë–ö–ê REPLICATE:', error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.' });
    }
});


app.post('/get-image-from-source', async (req, res) => {
    const { url } = req.body;
    if (!url) return res.status(400).json({ error: 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    console.log(`-> GET-IMAGE: –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: ${url}`);
    try {
        const response = await fetch(url, { headers: BROWSER_HEADERS });
        if (!response.ok) {
            throw new Error(`–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        }
        
        if (url.includes('waifu.im') || url.includes('waifu.pics')) {
            const data = await response.json();
            let imageUrl = data.images && data.images[0] ? data.images[0].url : null;
            if (!imageUrl) { imageUrl = data.url; }

            if (!imageUrl) {
                throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.');
            }
            res.json({ imageUrl: imageUrl });
        } else {
            res.json({ imageUrl: response.url });
        }
    } catch (error) {
        console.error(`!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê GET-IMAGE-FROM-SOURCE –¥–ª—è ${url}:`, error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.' }); 
    }
});


app.post('/feedback', async (req, res) => {
    try {
        const { type, message } = req.body;
        if (!type || !message) {
            return res.status(400).json({ error: '–¢–∏–ø –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });
        }

        const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
        
        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            console.error('!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤.' });
        }
        
        console.log(`-> FEEDBACK: –ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ —Ç–∏–ø–∞ "${type}". –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...`);
        const title = type === 'bug' ? 'üêû –ù–æ–≤—ã–π –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç' : 'üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
        const text = `<b>${title}</b>\n\n<pre>${message}</pre>`;
        const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const tgResponse = await fetch(telegramApiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'User-Agent': BROWSER_HEADERS['User-Agent'] },
            body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
        });
        
        const responseData = await tgResponse.json();
        if (!responseData.ok) {
            console.error(`!!! –û–®–ò–ë–ö–ê TELEGRAM API: ${responseData.description}`);
            throw new Error(`Telegram API Error: ${responseData.description}`);
        }
        
        console.log('-> FEEDBACK: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
        res.status(200).json({ success: true, message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
    } catch(error) {
        console.error('!!! –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò /feedback:', error.message);
        res.status(500).json({ error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞.' });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => { console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}. –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`); });
