// =================================================================
//          –°–ï–†–í–ï–†. ‚≠ê –§–ò–ù–ê–õ–¨–ù–ê–Ø –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ‚≠ê
// =================================================================

import express from 'express';
import Replicate from 'replicate';
import fetch from 'node-fetch';

const app = express();
app.use(express.json());
app.use(express.static('.')); // –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏

const replicate = new Replicate({ auth: process.env.REPLICATE_API_TOKEN });

const BROWSER_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8'
};

// ====================================================================
//           ‚≠ê –ú–û–ó–ì –ì–ï–ù–ï–†–ê–¢–û–†–ê: –ö–ê–†–¢–ê –°–ö–†–´–¢–´–• –ü–†–û–ú–ü–¢–û–í ‚≠ê
// –≠—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–≤–æ–µ–π –∏–¥–µ–∏ "—Å—É–ø–µ—Ä-–ø—Ä–æ–º–ø—Ç–æ–≤". –¢–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–π
// –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —ç—Ç–∏ "—É—Å–∏–ª–∏—Ç–µ–ª–∏".
// ====================================================================
const PROMPT_BRAIN = {
    waifu: {
        positive: 'anime artwork, anime style, key visual, vibrant, studio quality, masterpiece, best quality,',
        negative: 'photo, realistic, 3d, render, photography, real life, text, watermark, low quality, worst quality, blurry, morbid, signature, ugly'
    },
    anime_gif: {
        positive: 'anime artwork, anime style, key visual, vibrant, studio quality, masterpiece, best quality,',
        negative: 'photo, realistic, 3d, render, photography, real life, text, watermark, low quality, worst quality, blurry'
    },
    cyberpunk: {
        positive: 'cyberpunk art, neon lights, futuristic city, cinematic, detailed, atmospheric, high-tech, masterpiece,',
        negative: 'drawing, painting, anime, nature, day, bright, cartoon, text, watermark'
    },
    nature: {
        positive: 'landscape photography, national geographic, 4k, photorealistic, stunning, beautiful, detailed, masterpiece,',
        negative: 'drawing, painting, anime, people, text, watermark, ugly'
    },
    games: {
        positive: 'video game art, fan art, splash screen, concept art, cinematic, detailed character, epic, masterpiece,',
        negative: 'photo, real life, screenshot, text, watermark, blurry, low quality'
    },
    dark_anime: {
        positive: 'dark fantasy art, gothic, horror, monster, intricate details, moody, atmospheric, masterpiece,',
        negative: 'photo, realistic, cute, bright, day, happy, text, watermark'
    },
    supercars: {
        positive: 'car photography, cinematic shot, photorealistic, hyper detailed, professional, studio lighting, 8k, masterpiece,',
        negative: 'drawing, anime, painting, cartoon, ugly, text, watermark, people'
    },
    default: {
        positive: 'masterpiece, best quality, high quality, detailed,',
        negative: 'low quality, worst quality, blurry, text, watermark, signature'
    }
};

app.post('/generate-image', async (req, res) => {
    try {
        const { prompt: userPrompt, negative_prompt: userNegativePrompt, category } = req.body;
        if (!userPrompt) return res.status(400).json({ error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });

        // ‚≠ê –í—ã–±–∏—Ä–∞–µ–º "–º–æ–∑–≥" –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ "–º–æ–∑–≥" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const brain = PROMPT_BRAIN[category] || PROMPT_BRAIN.default;

        // ‚≠ê –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã—Ç—ã–π, –ø–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        const finalPositivePrompt = `${brain.positive} ${userPrompt}`;
        
        // ‚≠ê –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç: —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã—Ç—ã–π, –ø–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        const finalNegativePrompt = `${brain.negative}, ${userNegativePrompt || ''}`;

        const model = "stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4";
        
        console.log(`-> GENERATE: –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "${category}", –ú–æ–¥–µ–ª—å: "Stable Diffusion"`);
        console.log(`-> FINAL PROMPT: ${finalPositivePrompt}`);
        console.log(`-> FINAL NEGATIVE: ${finalNegativePrompt}`);

        const input = {
            prompt: finalPositivePrompt,
            negative_prompt: finalNegativePrompt,
        };
        
        const output = await replicate.run(model, { input });

        if (output && output.length > 0) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ñ–ª–∞–≥, —á—Ç–æ –æ–Ω–∞ –æ—Ç AI
            res.json({ imageUrl: output[0], isAiGenerated: true });
        } else { 
            throw new Error('Replicate API –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'); 
        }
    } catch (error) {
        console.error('!!! –û–®–ò–ë–ö–ê REPLICATE:', error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.' });
    }
});


app.post('/get-image-from-source', async (req, res) => {
    const { url } = req.body;
    if (!url) return res.status(400).json({ error: 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    console.log(`-> GET-IMAGE: –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: ${url}`);
    try {
        const response = await fetch(url, { headers: BROWSER_HEADERS });
        if (!response.ok) {
            throw new Error(`–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        }
        
        // API waifu.im/pics –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç JSON, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
        if (url.includes('waifu.im') || url.includes('waifu.pics')) {
            const data = await response.json();
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            let imageUrl = (data.images && data.images[0]) ? data.images[0].url : data.url;

            if (!imageUrl) {
                throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.');
            }
            res.json({ imageUrl: imageUrl, isAiGenerated: false }); // ‚≠ê –î–æ–±–∞–≤–ª–µ–Ω —Ñ–ª–∞–≥ isAiGenerated
        } else {
            // –î–ª—è unsplash –∏ –¥—Ä—É–≥–∏—Ö, URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
            res.json({ imageUrl: response.url, isAiGenerated: false }); // ‚≠ê –î–æ–±–∞–≤–ª–µ–Ω —Ñ–ª–∞–≥ isAiGenerated
        }
    } catch (error) {
        console.error(`!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê GET-IMAGE-FROM-SOURCE –¥–ª—è ${url}:`, error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.' }); 
    }
});


app.post('/feedback', async (req, res) => {
    try {
        const { type, message } = req.body;
        if (!type || !message) {
            return res.status(400).json({ error: '–¢–∏–ø –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });
        }

        const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
        
        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            console.error('!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä–Ω–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            return res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –æ—Ç–∑—ã–≤–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.' });
        }
        
        console.log(`-> FEEDBACK: –ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ —Ç–∏–ø–∞ "${type}". –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...`);
        const title = type === 'bug' ? 'üêû –ù–æ–≤—ã–π –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç' : 'üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
        const text = `<b>${title}</b>\n\n<pre>${message.replace(/</g, "<").replace(/>/g, ">")}</pre>`; // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const tgResponse = await fetch(telegramApiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
        });
        
        const responseData = await tgResponse.json();
        if (!responseData.ok) {
            console.error(`!!! –û–®–ò–ë–ö–ê TELEGRAM API: ${responseData.description}`);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram.');
        }
        
        console.log('-> FEEDBACK: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.');
        res.status(200).json({ success: true, message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
    } catch(error) {
        console.error('!!! –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò /feedback:', error.message);
        res.status(500).json({ error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞.' });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => { console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}. –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`); });
