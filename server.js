// =================================================================
//          üëá –ö–û–ü–ò–†–£–ô –í–ï–°–¨ –ö–û–î –ù–ò–ñ–ï –î–õ–Ø –§–ê–ô–õ–ê server.js üëá
// =================================================================

import express from 'express';
import Replicate from 'replicate';
import fetch from 'node-fetch';

const app = express();
app.use(express.json());
app.use(express.static('.'));

const replicate = new Replicate({ auth: process.env.REPLICATE_API_TOKEN });

const BROWSER_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8'
};

// ====================================================================
//           ‚≠ê –°–ò–°–¢–ï–ú–ê "–°–ï–ö–†–ï–¢–ù–´–• –ü–†–û–ú–ü–¢–û–í" –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ô ‚≠ê
// ====================================================================
const CATEGORY_PROMPTS = {
    'waifu': {
        model: 'stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4',
        prepend_prompt: 'anime artwork, anime style, high quality, 1girl, solo,',
        append_prompt: 'masterpiece, best quality, ultra-detailed, beautiful detailed eyes,',
        negative_prompt: 'photo, realistic, 3d, (deformed), (bad anatomy), (bad proportions), (blurry), watermark, text,'
    },
    'anime_gif': {
        model: 'stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4',
        prepend_prompt: 'anime artwork, anime style, high quality, 1girl, solo,',
        append_prompt: 'masterpiece, best quality, ultra-detailed, beautiful detailed eyes,',
        negative_prompt: 'photo, realistic, 3d, (deformed), (bad anatomy), (bad proportions), (blurry), watermark, text,'
    },
    'cyberpunk': {
        model: 'stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4',
        prepend_prompt: 'cyberpunk style, concept art, futuristic, neon lights,',
        append_prompt: 'dramatic lighting, intricate details, 4k,',
        negative_prompt: 'person, people, man, woman, cartoon, drawing, painting, (deformed), (blurry),'
    },
    'nature': {
        model: 'stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4',
        prepend_prompt: 'beautiful landscape painting,',
        append_prompt: 'epic, breathtaking, 4k, trending on artstation,',
        negative_prompt: 'person, people, man, woman, building, road, (blurry), (ugly),'
    },
    'default': {
        model: 'stability-ai/stable-diffusion:ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4',
        prepend_prompt: '',
        append_prompt: '4k, high quality, masterpiece,',
        negative_prompt: '(blurry), (ugly), low quality,'
    }
};

app.post('/generate-image', async (req, res) => {
    try {
        const { prompt: user_prompt, negative_prompt: user_negative_prompt, category } = req.body;
        if (!user_prompt) return res.status(400).json({ error: '–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });

        // –í—ã–±–∏—Ä–∞–µ–º "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π" –Ω–∞–±–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const presets = CATEGORY_PROMPTS[category] || CATEGORY_PROMPTS['default'];

        // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: (—Å–µ–∫—Ä–µ—Ç_–Ω–∞—á–∞–ª–æ) + (–ø—Ä–æ–º–ø—Ç_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) + (—Å–µ–∫—Ä–µ—Ç_–∫–æ–Ω–µ—Ü)
        const finalPrompt = `${presets.prepend_prompt} ${user_prompt}, ${presets.append_prompt}`;
        // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç: (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–Ω–µ–≥–∞—Ç–∏–≤) + (–Ω–µ–≥–∞—Ç–∏–≤_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        const finalNegativePrompt = `${presets.negative_prompt}, ${user_negative_prompt || ''}`;
        
        console.log(`-> GENERATE: –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "${category}", –ú–æ–¥–µ–ª—å: "${presets.model}"`);
        console.log(`-> PROMPT: "${finalPrompt}" | NEGATIVE: "${finalNegativePrompt}"`);

        const input = {
            prompt: finalPrompt,
            negative_prompt: finalNegativePrompt,
        };
        
        const output = await replicate.run(presets.model, { input });

        if (output && output.length > 0) {
            res.json({ imageUrl: output[0] });
        } else { 
            throw new Error('Replicate API –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'); 
        }
    } catch (error) {
        console.error('!!! –û–®–ò–ë–ö–ê REPLICATE:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.' });
    }
});

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
app.post('/get-image-from-source', async (req, res) => {
    const { url } = req.body;
    if (!url) return res.status(400).json({ error: 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.' });
    try {
        const response = await fetch(url, { headers: BROWSER_HEADERS });
        if (!response.ok) throw new Error(`–í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        
        if (url.includes('waifu.im')) {
            const data = await response.json();
            const imageUrl = data.images && data.images[0] ? data.images[0].url : null;
            if (!imageUrl) throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.');
            res.json({ imageUrl: imageUrl });
        } else {
            res.json({ imageUrl: response.url });
        }
    } catch (error) {
        console.error(`!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê GET-IMAGE-FROM-SOURCE –¥–ª—è ${url}:`, error.message);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.' }); 
    }
});

app.post('/feedback', async (req, res) => {
    try {
        const { type, message } = req.body;
        if (!type || !message) return res.status(400).json({ error: '–¢–∏–ø –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.' });

        const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
        
        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            console.error('!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤.' });
        }
        
        const title = type === 'bug' ? 'üêû –ù–æ–≤—ã–π –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç' : 'üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
        const text = `<b>${title}</b>\n\n<pre>${message}</pre>`;
        const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const tgResponse = await fetch(telegramApiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'User-Agent': BROWSER_HEADERS['User-Agent'] },
            body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
        });
        
        const responseData = await tgResponse.json();
        if (!responseData.ok) {
            console.error(`!!! –û–®–ò–ë–ö–ê TELEGRAM API: ${responseData.description}`);
            throw new Error(`Telegram API Error: ${responseData.description}`);
        }
        
        res.status(200).json({ success: true, message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
    } catch(error) {
        console.error('!!! –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò /feedback:', error.message);
        res.status(500).json({ error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞.' });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => { console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}. –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!`); });
