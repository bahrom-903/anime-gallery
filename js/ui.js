// ===================================
//      –§–∞–π–ª: ui.js
//      –†–æ–ª—å: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
// ===================================
import { THEMES, STYLES, CATEGORIES } from './config.js';
import { getState } from './state.js';
import { dbRequest } from './db.js';

// --- –§—É–Ω–∫—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –ø–∞–Ω–µ–ª–µ–π ---

export const renderThemes = (elements, applyTheme) => {
    const grid = elements.themeGrid;
    if (!grid) return;
    grid.innerHTML = '';
    
    THEMES.forEach(item => {
        const card = document.createElement("div");
        card.className = "preview-card";
        card.dataset.theme = item.id;
        
        const name = item.id.charAt(0).toUpperCase() + item.id.slice(1).replace(/_/g, ' ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é
        card.innerHTML = `<div class="preview-box theme-${item.id}"></div><div class="preview-name">${name}</div>`;
        card.addEventListener('click', () => applyTheme(item.id));
        grid.appendChild(card);
    });
};

export const renderStyles = (elements, translations) => {
    const selector = elements.styleSelector;
    if (!selector) return;
    selector.innerHTML = '';

    const langPack = translations[getState().currentLanguage] || translations.ru;
    for (const [id, value] of Object.entries(STYLES)) {
        const option = document.createElement('option');
        option.value = value;
        option.textContent = (langPack[`style_${id}`] || id);
        selector.appendChild(option);
    }
};

export const renderCategories = (elements, translations, handleCategoryClick) => {
    const controls = elements.categoryControls;
    if (!controls) return;
    controls.innerHTML = '';

    const langPack = translations[getState().currentLanguage] || translations.ru;
    for (const id of Object.keys(CATEGORIES)) {
        const btn = document.createElement('button');
        btn.dataset.categoryId = id;
        btn.textContent = (langPack[`cat_${id}`] || id.replace(/_/g, ' '));
        if (id === getState().currentCategory) btn.classList.add('active-category');
        btn.addEventListener('click', () => handleCategoryClick(id));
        controls.appendChild(btn);
    }
};

export const renderSortOptions = (elements, translations) => {
    const grid = elements.sortGrid;
    if (!grid) return;
    grid.innerHTML = '';

    const langPack = translations[getState().currentLanguage] || translations.ru;
    const sortOptions = {
        'date_desc': langPack.sort_newest, 'date_asc': langPack.sort_oldest,
        'random': langPack.sort_random, 'separator': '---',
        'filter_favorite': langPack.sort_favorites
    };

    for (const [key, value] of Object.entries(sortOptions)) {
        if (key === 'separator') {
            grid.appendChild(document.createElement('hr'));
            continue;
        }
        const button = document.createElement('button');
        button.className = 'panel-button';
        button.dataset.sort = key;
        button.textContent = value;
        if (key === 'filter_favorite' && getState().isFavFilterActive) {
            button.classList.add('active-filter');
        }
        grid.appendChild(button);
    }
};

export const renderBackgrounds = async (elements) => {
    try {
        const grid = elements.backgroundGrid;
        if (!grid) {
            console.error("–≠–ª–µ–º–µ–Ω—Ç backgroundGrid –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        
        const storedBgs = await dbRequest('defaultBackgrounds', 'readonly', store => store.getAll());
        grid.innerHTML = '';

        // 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
        const uploadCard = document.createElement("div");
        uploadCard.className = "preview-card";
        uploadCard.dataset.bgId = "upload-new"; // –≠—Ç–æ—Ç data-–∞—Ç—Ä–∏–±—É—Ç –±—É–¥–µ—Ç –æ—Ç–ª–æ–≤–ª–µ–Ω –≤ events.js
        uploadCard.innerHTML = `<div class="preview-box upload-box">üì•</div><div class="preview-name" data-lang-key="upload_your_bg">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π —Ñ–æ–Ω</div>`;
        grid.appendChild(uploadCard);

        // 2. –†–µ–Ω–¥–µ—Ä–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const existingObjectURLs = document.querySelectorAll('#backgroundPanel [data-object-url]');
        existingObjectURLs.forEach(el => URL.revokeObjectURL(el.dataset.objectUrl));
        
        storedBgs.forEach(bg => {
            const objectURL = URL.createObjectURL(bg.blob);
            const card = document.createElement("div");
            card.className = "preview-card";
            card.dataset.bgId = bg.id;
            card.innerHTML = `<div class="preview-box" style="background-image: url(${objectURL});" data-object-url="${objectURL}"></div><div class="preview-name">${bg.id}</div>`;
            grid.appendChild(card);
        });
    } catch(e) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞ —Ñ–æ–Ω–æ–≤:", e);
    }
};

// --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ UI ---

export const renderGallery = async (elements, toggleFavorite, showContextMenu, viewImage) => {
    try {
        const allGalleryData = await dbRequest('gallery', 'readonly', store => store.getAll());
        if (!elements.galleryContainer) return;
        elements.galleryContainer.innerHTML = "";

        let categoryData = allGalleryData.filter(item => item.category === getState().currentCategory);
        let dataToRender = [...categoryData];
        
        if (getState().isFavFilterActive) {
            const favoriteItems = categoryData.filter(e => e.favorite);
            if (favoriteItems.length > 0 || categoryData.length === 0) {
                 dataToRender = favoriteItems;
            }
        }
        
        const sortType = getState().currentSort;
        if (sortType === 'date_asc') dataToRender.sort((a, b) => a.id - b.id);
        else if (sortType === 'date_desc') dataToRender.sort((a, b) => b.id - a.id);
        else if (sortType === 'random') dataToRender.sort(() => Math.random() - 0.5);

        if (elements.selectionControls) {
            elements.selectionControls.classList.toggle('hidden', dataToRender.length === 0);
        }
        if(elements.selectAllCheckbox) {
            elements.selectAllCheckbox.checked = false;
        }

        dataToRender.forEach(entry => {
            const item = document.createElement('div');
            item.className = "gallery-item";
            item.dataset.id = entry.id;

            const img = document.createElement('img');
            img.src = entry.data;
            img.loading = "lazy";
            img.alt = entry.prompt;
            img.addEventListener('dblclick', () => viewImage(entry.data));

            const controls = document.createElement('div');
            controls.className = 'item-controls';

            const cb = document.createElement('input');
            cb.type = 'checkbox';
            cb.className = 'select-checkbox';

            const fav = document.createElement('div');
            fav.innerText = entry.favorite ? '‚≠ê' : '‚òÜ';
            fav.className = 'favorite-star';
            fav.addEventListener('click', (e) => { e.stopPropagation(); toggleFavorite(entry.id, !entry.favorite); });

            const menuBtn = document.createElement('button');
            menuBtn.className = 'item-menu-btn';
            menuBtn.innerHTML = '‚ãÆ';
            menuBtn.addEventListener('click', (e) => { e.stopPropagation(); showContextMenu(e.target, entry.id); });

            controls.append(cb, fav, menuBtn);
            item.append(img, controls);
            elements.galleryContainer.appendChild(item);
        });
    } catch (e) {
        showError(elements, `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–∞–ª–µ—Ä–µ—é: ${e.message}`);
    }
};

export const setLanguage = (elements, lang, translations, callbacks) => {
    localStorage.setItem('language', lang);
    const langPack = translations[lang] || translations.ru;
    document.querySelectorAll('[data-lang-key]').forEach(el => {
        const key = el.dataset.langKey;
        if (langPack[key]) el.textContent = langPack[key];
    });
    document.querySelectorAll('[data-lang-placeholder-key]').forEach(el => {
        const key = el.dataset.langPlaceholderKey;
        if (langPack[key]) el.placeholder = langPack[key];
    });
    callbacks.renderCategories();
    callbacks.renderThemes();
    callbacks.renderStyles();
    callbacks.renderSortOptions();
    callbacks.renderChangelog();
};

export const applyTheme = (id) => {
    document.body.className = id ? `theme-${id}` : '';
    document.body.classList.toggle('has-custom-bg', !!document.body.style.getPropertyValue('--bg-image-url'));
    localStorage.setItem("theme", id);
};

export const setUIGeneratorState = (elements, isLoading, message = '') => {
    const btns = [elements.generateBtn, elements.findSimilarBtn, elements.randomImageBtn, elements.randomPromptBtn];
    btns.forEach(btn => { if (btn) btn.disabled = isLoading; });
    
    if (elements.loader) elements.loader.classList.toggle('hidden', !isLoading);
    if (elements.errorMessage) elements.errorMessage.classList.add('hidden');
    if (elements.imageContainer) elements.imageContainer.innerHTML = '';
    if (elements.resultControls) elements.resultControls.classList.add('hidden');

    if (isLoading && elements.loaderText) {
        elements.loaderText.textContent = message;
    }
};

export const displayGeneratedImage = (elements, imageUrl, prompt, isAiGenerated) => {
    return new Promise((resolve, reject) => {
        if (!elements.imageContainer || !elements.resultControls) {
            return reject(new Error("UI-—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."));
        }
        const img = new Image();
        img.crossOrigin = "Anonymous";
        img.src = imageUrl;
        img.alt = prompt;
        img.onload = () => {
            elements.imageContainer.innerHTML = '';
            elements.imageContainer.appendChild(img);
            elements.resultControls.classList.remove('hidden');
            resolve({ imageUrl, prompt, isAiGenerated });
        };
        img.onerror = () => reject(new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."));
    });
};

export const showError = (elements, message) => {
    if (elements.errorMessage) {
        elements.errorMessage.textContent = message;
        elements.errorMessage.classList.remove('hidden');
    }
};

export const showFeedbackStatus = (element, message, type) => {
    if (element) {
        element.textContent = message;
        element.className = type; // 'success' or 'error'
        element.classList.remove('hidden');
    }
};

export const openPanel = (panel) => { if (panel) panel.style.display = 'flex'; };
export const closePanel = (panel) => { if (panel) panel.style.display = 'none'; };

export const viewImage = (elements, src) => {
    if (elements.viewerImg) elements.viewerImg.src = src;
    if (elements.imageViewer) openPanel(elements.imageViewer);
};

export const showContextMenu = (elements, buttonElement, itemId, translations, callbacks) => {
    hideContextMenu(elements);
    callbacks.setContextedItemId(itemId);
    const langPack = translations[getState().currentLanguage] || translations.ru;
    const rect = buttonElement.getBoundingClientRect();
    const menu = elements.contextMenu;

    if (menu) {
        menu.style.display = 'block';
        menu.style.left = `${rect.left + window.scrollX}px`;
        menu.style.top = `${rect.bottom + window.scrollY + 5}px`;
        menu.innerHTML = `<button data-action="rename">${langPack.ctx_rename}</button><button data-action="copy-prompt">${langPack.ctx_copy_prompt}</button>`;
    }
};

export const hideContextMenu = (elements) => {
    if (elements.contextMenu) elements.contextMenu.style.display = 'none';
};

export const renderChangelog = (elements, translations) => {
    if (elements.changelogContentArea) {
        elements.changelogContentArea.innerHTML = `<h3>V 1.0 - Diamond Patch</h3><ul><li>–£–ª—É—á—à–µ–Ω AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –ø–æ–º–æ—â—å—é —Å–∏—Å—Ç–µ–º—ã —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.</li><li>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –¥–∏–∑–∞–π–Ω –∏ –ª–æ–≥–∏–∫–∞ –º–µ–Ω—é.</li><li>–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ AI-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.</li><li>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.</li></ul><div class="contributor-thanks">–û—Å–æ–±–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤—Å–µ–º, –∫—Ç–æ —Å–æ–æ–±—â–∞–ª –æ–± –æ—à–∏–±–∫–∞—Ö!</div>`;
    }
};
